{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bahamut\\\\Desktop\\\\Projects\\\\chess-app\\\\src\\\\components\\\\ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Chessground } from \"chessground\";\nimport \"chessground/dist/chessground.base.css\";\nimport \"chessground/dist/themes/chessground.brown.css\";\nimport { Chess } from \"chess.js\";\nimport stockfish from \"stockfish\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = () => {\n  _s();\n  const boardRef = useRef(null);\n  const groundRef = useRef(null);\n  const gameRef = useRef(new Chess());\n  const stockfishRef = useRef(null);\n  const [drawShapes, setDrawShapes] = useState([]);\n  const [botType, setBotType] = useState(\"random\"); // Default Bot type\n\n  useEffect(() => {\n    groundRef.current = Chessground(boardRef.current, {\n      movable: {\n        color: \"both\",\n        free: false,\n        events: {\n          after: onMove\n        }\n      },\n      drawable: {\n        enabled: true,\n        shapes: drawShapes\n      }\n    });\n\n    // Initialize Stockfish\n    stockfishRef.current = stockfish();\n    stockfishRef.current.onmessage = event => {\n      if (event && typeof event === \"string\" && event.startsWith(\"bestmove\")) {\n        const bestMove = event.split(\" \")[1];\n        gameRef.current.move({\n          from: bestMove.slice(0, 2),\n          to: bestMove.slice(2, 4)\n        });\n        groundRef.current.set({\n          fen: gameRef.current.fen()\n        });\n      }\n    };\n  }, [drawShapes]);\n  const onMove = (orig, dest) => {\n    const move = gameRef.current.move({\n      from: orig,\n      to: dest\n    });\n    if (move === null) return;\n    groundRef.current.set({\n      fen: gameRef.current.fen()\n    });\n    if (botType === \"random\") {\n      makeRandomMove();\n    } else if (botType === \"greedy\") {\n      makeGreedyMove();\n    } else if (botType === \"stockfish\") {\n      stockfishRef.current.postMessage(`position fen ${gameRef.current.fen()}`);\n      stockfishRef.current.postMessage(\"go movetime 1000\");\n    }\n  };\n  const makeRandomMove = () => {\n    const possibleMoves = gameRef.current.moves();\n    if (possibleMoves.length === 0) return;\n    const move = possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    gameRef.current.move(move);\n    groundRef.current.set({\n      fen: gameRef.current.fen()\n    });\n  };\n  const makeGreedyMove = () => {\n    const moves = gameRef.current.moves({\n      verbose: true\n    });\n    let bestMove = null;\n    let bestValue = -9999;\n    moves.forEach(move => {\n      gameRef.current.move(move.san);\n      const boardValue = evaluateBoard(gameRef.current.board());\n      gameRef.current.undo();\n      if (boardValue > bestValue) {\n        bestValue = boardValue;\n        bestMove = move;\n      }\n    });\n    gameRef.current.move(bestMove.san);\n    groundRef.current.set({\n      fen: gameRef.current.fen()\n    });\n  };\n  const evaluateBoard = board => {\n    let totalEvaluation = 0;\n    for (let row of board) {\n      for (let piece of row) {\n        if (piece) {\n          totalEvaluation += getPieceValue(piece);\n        }\n      }\n    }\n    return totalEvaluation;\n  };\n  const getPieceValue = piece => {\n    const values = {\n      p: 10,\n      r: 50,\n      n: 30,\n      b: 30,\n      q: 90,\n      k: 900\n    };\n    return (piece.color === \"w\" ? 1 : -1) * values[piece.type];\n  };\n  const addArrow = () => {\n    setDrawShapes([...drawShapes, {\n      orig: \"e2\",\n      dest: \"e4\",\n      brush: \"green\"\n    }]);\n  };\n  const addCircle = () => {\n    setDrawShapes([...drawShapes, {\n      orig: \"d4\",\n      brush: \"red\"\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: boardRef,\n      style: {\n        width: \"400px\",\n        height: \"400px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addArrow,\n      children: \"Add Arrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCircle,\n      children: \"Add Circle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Bot: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setBotType(e.target.value),\n        value: botType,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"random\",\n          children: \"Random Bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"greedy\",\n          children: \"Greedy Bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"stockfish\",\n          children: \"Stockfish Bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"0HFUAbRjI/fNszIGkGTM/XMvono=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Chessground","Chess","stockfish","jsxDEV","_jsxDEV","ChessBoard","_s","boardRef","groundRef","gameRef","stockfishRef","drawShapes","setDrawShapes","botType","setBotType","current","movable","color","free","events","after","onMove","drawable","enabled","shapes","onmessage","event","startsWith","bestMove","split","move","from","slice","to","set","fen","orig","dest","makeRandomMove","makeGreedyMove","postMessage","possibleMoves","moves","length","Math","floor","random","verbose","bestValue","forEach","san","boardValue","evaluateBoard","board","undo","totalEvaluation","row","piece","getPieceValue","values","p","r","n","b","q","k","type","addArrow","brush","addCircle","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","e","target","value","_c","$RefreshReg$"],"sources":["C:/Users/Bahamut/Desktop/Projects/chess-app/src/components/ChessBoard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { Chessground } from \"chessground\";\nimport \"chessground/dist/chessground.base.css\";\nimport \"chessground/dist/themes/chessground.brown.css\";\nimport { Chess } from \"chess.js\";\nimport stockfish from \"stockfish\";\n\nconst ChessBoard = () => {\n  const boardRef = useRef(null);\n  const groundRef = useRef(null);\n  const gameRef = useRef(new Chess());\n  const stockfishRef = useRef(null);\n  const [drawShapes, setDrawShapes] = useState([]);\n  const [botType, setBotType] = useState(\"random\"); // Default Bot type\n\n  useEffect(() => {\n    groundRef.current = Chessground(boardRef.current, {\n      movable: {\n        color: \"both\",\n        free: false,\n        events: {\n          after: onMove,\n        },\n      },\n      drawable: {\n        enabled: true,\n        shapes: drawShapes,\n      },\n    });\n\n    // Initialize Stockfish\n    stockfishRef.current = stockfish();\n    stockfishRef.current.onmessage = (event) => {\n      if (event && typeof event === \"string\" && event.startsWith(\"bestmove\")) {\n        const bestMove = event.split(\" \")[1];\n        gameRef.current.move({\n          from: bestMove.slice(0, 2),\n          to: bestMove.slice(2, 4),\n        });\n        groundRef.current.set({ fen: gameRef.current.fen() });\n      }\n    };\n  }, [drawShapes]);\n\n  const onMove = (orig, dest) => {\n    const move = gameRef.current.move({ from: orig, to: dest });\n    if (move === null) return;\n    groundRef.current.set({ fen: gameRef.current.fen() });\n\n    if (botType === \"random\") {\n      makeRandomMove();\n    } else if (botType === \"greedy\") {\n      makeGreedyMove();\n    } else if (botType === \"stockfish\") {\n      stockfishRef.current.postMessage(`position fen ${gameRef.current.fen()}`);\n      stockfishRef.current.postMessage(\"go movetime 1000\");\n    }\n  };\n\n  const makeRandomMove = () => {\n    const possibleMoves = gameRef.current.moves();\n    if (possibleMoves.length === 0) return;\n    const move =\n      possibleMoves[Math.floor(Math.random() * possibleMoves.length)];\n    gameRef.current.move(move);\n    groundRef.current.set({ fen: gameRef.current.fen() });\n  };\n\n  const makeGreedyMove = () => {\n    const moves = gameRef.current.moves({ verbose: true });\n    let bestMove = null;\n    let bestValue = -9999;\n\n    moves.forEach((move) => {\n      gameRef.current.move(move.san);\n      const boardValue = evaluateBoard(gameRef.current.board());\n      gameRef.current.undo();\n\n      if (boardValue > bestValue) {\n        bestValue = boardValue;\n        bestMove = move;\n      }\n    });\n\n    gameRef.current.move(bestMove.san);\n    groundRef.current.set({ fen: gameRef.current.fen() });\n  };\n\n  const evaluateBoard = (board) => {\n    let totalEvaluation = 0;\n    for (let row of board) {\n      for (let piece of row) {\n        if (piece) {\n          totalEvaluation += getPieceValue(piece);\n        }\n      }\n    }\n    return totalEvaluation;\n  };\n\n  const getPieceValue = (piece) => {\n    const values = {\n      p: 10,\n      r: 50,\n      n: 30,\n      b: 30,\n      q: 90,\n      k: 900,\n    };\n    return (piece.color === \"w\" ? 1 : -1) * values[piece.type];\n  };\n\n  const addArrow = () => {\n    setDrawShapes([...drawShapes, { orig: \"e2\", dest: \"e4\", brush: \"green\" }]);\n  };\n\n  const addCircle = () => {\n    setDrawShapes([...drawShapes, { orig: \"d4\", brush: \"red\" }]);\n  };\n\n  return (\n    <div>\n      <div ref={boardRef} style={{ width: \"400px\", height: \"400px\" }} />\n      <button onClick={addArrow}>Add Arrow</button>\n      <button onClick={addCircle}>Add Circle</button>\n      <div>\n        <label>Select Bot: </label>\n        <select onChange={(e) => setBotType(e.target.value)} value={botType}>\n          <option value=\"random\">Random Bot</option>\n          <option value=\"greedy\">Greedy Bot</option>\n          <option value=\"stockfish\">Stockfish Bot</option>\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAO,uCAAuC;AAC9C,OAAO,+CAA+C;AACtD,SAASC,KAAK,QAAQ,UAAU;AAChC,OAAOC,SAAS,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMU,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMW,OAAO,GAAGX,MAAM,CAAC,IAAIG,KAAK,CAAC,CAAC,CAAC;EACnC,MAAMS,YAAY,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;;EAElDF,SAAS,CAAC,MAAM;IACdW,SAAS,CAACO,OAAO,GAAGf,WAAW,CAACO,QAAQ,CAACQ,OAAO,EAAE;MAChDC,OAAO,EAAE;QACPC,KAAK,EAAE,MAAM;QACbC,IAAI,EAAE,KAAK;QACXC,MAAM,EAAE;UACNC,KAAK,EAAEC;QACT;MACF,CAAC;MACDC,QAAQ,EAAE;QACRC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAEb;MACV;IACF,CAAC,CAAC;;IAEF;IACAD,YAAY,CAACK,OAAO,GAAGb,SAAS,CAAC,CAAC;IAClCQ,YAAY,CAACK,OAAO,CAACU,SAAS,GAAIC,KAAK,IAAK;MAC1C,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;QACtE,MAAMC,QAAQ,GAAGF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACpCpB,OAAO,CAACM,OAAO,CAACe,IAAI,CAAC;UACnBC,IAAI,EAAEH,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAC1BC,EAAE,EAAEL,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC;QACzB,CAAC,CAAC;QACFxB,SAAS,CAACO,OAAO,CAACmB,GAAG,CAAC;UAAEC,GAAG,EAAE1B,OAAO,CAACM,OAAO,CAACoB,GAAG,CAAC;QAAE,CAAC,CAAC;MACvD;IACF,CAAC;EACH,CAAC,EAAE,CAACxB,UAAU,CAAC,CAAC;EAEhB,MAAMU,MAAM,GAAGA,CAACe,IAAI,EAAEC,IAAI,KAAK;IAC7B,MAAMP,IAAI,GAAGrB,OAAO,CAACM,OAAO,CAACe,IAAI,CAAC;MAAEC,IAAI,EAAEK,IAAI;MAAEH,EAAE,EAAEI;IAAK,CAAC,CAAC;IAC3D,IAAIP,IAAI,KAAK,IAAI,EAAE;IACnBtB,SAAS,CAACO,OAAO,CAACmB,GAAG,CAAC;MAAEC,GAAG,EAAE1B,OAAO,CAACM,OAAO,CAACoB,GAAG,CAAC;IAAE,CAAC,CAAC;IAErD,IAAItB,OAAO,KAAK,QAAQ,EAAE;MACxByB,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM,IAAIzB,OAAO,KAAK,QAAQ,EAAE;MAC/B0B,cAAc,CAAC,CAAC;IAClB,CAAC,MAAM,IAAI1B,OAAO,KAAK,WAAW,EAAE;MAClCH,YAAY,CAACK,OAAO,CAACyB,WAAW,CAAE,gBAAe/B,OAAO,CAACM,OAAO,CAACoB,GAAG,CAAC,CAAE,EAAC,CAAC;MACzEzB,YAAY,CAACK,OAAO,CAACyB,WAAW,CAAC,kBAAkB,CAAC;IACtD;EACF,CAAC;EAED,MAAMF,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMG,aAAa,GAAGhC,OAAO,CAACM,OAAO,CAAC2B,KAAK,CAAC,CAAC;IAC7C,IAAID,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;IAChC,MAAMb,IAAI,GACRW,aAAa,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,aAAa,CAACE,MAAM,CAAC,CAAC;IACjElC,OAAO,CAACM,OAAO,CAACe,IAAI,CAACA,IAAI,CAAC;IAC1BtB,SAAS,CAACO,OAAO,CAACmB,GAAG,CAAC;MAAEC,GAAG,EAAE1B,OAAO,CAACM,OAAO,CAACoB,GAAG,CAAC;IAAE,CAAC,CAAC;EACvD,CAAC;EAED,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMG,KAAK,GAAGjC,OAAO,CAACM,OAAO,CAAC2B,KAAK,CAAC;MAAEK,OAAO,EAAE;IAAK,CAAC,CAAC;IACtD,IAAInB,QAAQ,GAAG,IAAI;IACnB,IAAIoB,SAAS,GAAG,CAAC,IAAI;IAErBN,KAAK,CAACO,OAAO,CAAEnB,IAAI,IAAK;MACtBrB,OAAO,CAACM,OAAO,CAACe,IAAI,CAACA,IAAI,CAACoB,GAAG,CAAC;MAC9B,MAAMC,UAAU,GAAGC,aAAa,CAAC3C,OAAO,CAACM,OAAO,CAACsC,KAAK,CAAC,CAAC,CAAC;MACzD5C,OAAO,CAACM,OAAO,CAACuC,IAAI,CAAC,CAAC;MAEtB,IAAIH,UAAU,GAAGH,SAAS,EAAE;QAC1BA,SAAS,GAAGG,UAAU;QACtBvB,QAAQ,GAAGE,IAAI;MACjB;IACF,CAAC,CAAC;IAEFrB,OAAO,CAACM,OAAO,CAACe,IAAI,CAACF,QAAQ,CAACsB,GAAG,CAAC;IAClC1C,SAAS,CAACO,OAAO,CAACmB,GAAG,CAAC;MAAEC,GAAG,EAAE1B,OAAO,CAACM,OAAO,CAACoB,GAAG,CAAC;IAAE,CAAC,CAAC;EACvD,CAAC;EAED,MAAMiB,aAAa,GAAIC,KAAK,IAAK;IAC/B,IAAIE,eAAe,GAAG,CAAC;IACvB,KAAK,IAAIC,GAAG,IAAIH,KAAK,EAAE;MACrB,KAAK,IAAII,KAAK,IAAID,GAAG,EAAE;QACrB,IAAIC,KAAK,EAAE;UACTF,eAAe,IAAIG,aAAa,CAACD,KAAK,CAAC;QACzC;MACF;IACF;IACA,OAAOF,eAAe;EACxB,CAAC;EAED,MAAMG,aAAa,GAAID,KAAK,IAAK;IAC/B,MAAME,MAAM,GAAG;MACbC,CAAC,EAAE,EAAE;MACLC,CAAC,EAAE,EAAE;MACLC,CAAC,EAAE,EAAE;MACLC,CAAC,EAAE,EAAE;MACLC,CAAC,EAAE,EAAE;MACLC,CAAC,EAAE;IACL,CAAC;IACD,OAAO,CAACR,KAAK,CAACxC,KAAK,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI0C,MAAM,CAACF,KAAK,CAACS,IAAI,CAAC;EAC5D,CAAC;EAED,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrBvD,aAAa,CAAC,CAAC,GAAGD,UAAU,EAAE;MAAEyB,IAAI,EAAE,IAAI;MAAEC,IAAI,EAAE,IAAI;MAAE+B,KAAK,EAAE;IAAQ,CAAC,CAAC,CAAC;EAC5E,CAAC;EAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtBzD,aAAa,CAAC,CAAC,GAAGD,UAAU,EAAE;MAAEyB,IAAI,EAAE,IAAI;MAAEgC,KAAK,EAAE;IAAM,CAAC,CAAC,CAAC;EAC9D,CAAC;EAED,oBACEhE,OAAA;IAAAkE,QAAA,gBACElE,OAAA;MAAKmE,GAAG,EAAEhE,QAAS;MAACiE,KAAK,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClE1E,OAAA;MAAQ2E,OAAO,EAAEZ,QAAS;MAAAG,QAAA,EAAC;IAAS;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC7C1E,OAAA;MAAQ2E,OAAO,EAAEV,SAAU;MAAAC,QAAA,EAAC;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/C1E,OAAA;MAAAkE,QAAA,gBACElE,OAAA;QAAAkE,QAAA,EAAO;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC3B1E,OAAA;QAAQ4E,QAAQ,EAAGC,CAAC,IAAKnE,UAAU,CAACmE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAACA,KAAK,EAAEtE,OAAQ;QAAAyD,QAAA,gBAClElE,OAAA;UAAQ+E,KAAK,EAAC,QAAQ;UAAAb,QAAA,EAAC;QAAU;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1C1E,OAAA;UAAQ+E,KAAK,EAAC,QAAQ;UAAAb,QAAA,EAAC;QAAU;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1C1E,OAAA;UAAQ+E,KAAK,EAAC,WAAW;UAAAb,QAAA,EAAC;QAAa;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxE,EAAA,CAhIID,UAAU;AAAA+E,EAAA,GAAV/E,UAAU;AAkIhB,eAAeA,UAAU;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}